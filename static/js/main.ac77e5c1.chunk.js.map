{"version":3,"sources":["components/Todo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Todo","App","useState","setTask","handleChange","event","target","value","className","type","placeholder","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAMeA,EANF,WACT,OACI,wCCuCOC,EAhCA,WAEb,MAAwBC,mBAAiB,IAAzC,mBAAaC,GAAb,WACA,EAAsBD,mBAAiB,GAAvC,mBACA,GADA,UACwBA,mBAAiB,KAAzC,mBAEME,GAFN,UAEqB,SAACC,GACpBF,EAAQE,EAAMC,OAAOC,SAIvB,OACE,sBAAKC,UAAU,MAAf,UACE,0CACA,gCACE,uBACEC,KAAK,OACLC,YAAY,oBACZC,SAAWP,IAEb,uBACEK,KAAK,SACLC,YAAY,gBACZC,SAAWP,IAEb,4CAEF,8BAAK,cAAC,EAAD,UCtBIQ,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.ac77e5c1.chunk.js","sourcesContent":["const Todo = () => {\r\n    return (\r\n        <div>Todo</div>\r\n    )\r\n}\r\n\r\nexport default Todo;","import React, { FC, useState, ChangeEvent } from 'react';\nimport './App.css';\nimport Todo from './components/Todo';\n\ninterface Todo {\n  task: string;\n  day: number\n}\n\nconst App:FC = () => {\n  \n  const [task, setTask] = useState<string>(\"\")\n  const [day, setDay] = useState<number>(0)\n  const [todo, setTodo] = useState<Todo[]>([])\n\n  const handleChange = (event:ChangeEvent<HTMLInputElement>):void => {\n    setTask(event.target.value)\n\n  }\n\n  return (\n    <div className=\"App\">\n      <h3>Todo App</h3>\n      <div>\n        <input \n          type=\"text\"\n          placeholder=\"type task here...\"\n          onChange= {handleChange}\n        />\n        <input \n          type=\"number\"\n          placeholder=\"remaining day\"\n          onChange= {handleChange}\n        />\n        <button>Add</button>\n      </div>\n      <div><Todo /></div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}